package views.forms;

import controllers.BandeController;
import models.Bande;
import models.${Model};

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.SimpleDateFormat;
import java.util.Vector;

/**
 * Created by sissoko on ${date}.
 */
public class ${Model}Form extends BaseForm implements LayoutManager {
    /*
    protected JLabel bandeLabel;
    protected JComboBox<Bande> bandeField;
    protected JLabel bandeLabelError;
    protected InputGroup bandeInputGroup;

    protected JLabel ${model}_dateLabel;
    protected JFormattedTextField ${model}_dateField;
    protected JLabel ${model}_dateLabelError;
    protected InputGroup ${model}_dateInputGroup;
    */

    private ${Model} ${model};

    public ${Model}Form() {
        this(new ${Model}());
    }

    /**
     *
     * @param ${model}
     */
    public ${Model}Form(${Model} ${model}) {
        super();
        this.${model} = ${model};
        setLayout(this);
        init();
        bind();
    }

    private void init() {
        /*
        this.bandeLabel = new JLabel(bundle.getString("label.bande"));
        this.bandeField = new JComboBox<Bande>();
        this.bandeLabelError = new JLabel();
        this.bandeInputGroup = new InputGroup(bandeLabel, bandeField, bandeLabelError);
        add(bandeInputGroup);
        java.util.List<Bande> bandes = BandeController.getInstance().select("b from Bande b").getResultList();
        this.bandeField.setModel(new DefaultComboBoxModel<Bande>(new Vector<Bande>(bandes)));
        this.bandeField.setSelectedItem(${model}.getBande());

        this.${model}_dateLabel = new JLabel("Date ${model}");
        this.${model}_dateField = new JFormattedTextField(new SimpleDateFormat("dd/MM/yyyy"));
        this.${model}_dateLabelError = new JLabel();
        this.${model}_dateInputGroup = new InputGroup(${model}_dateLabel, ${model}_dateField, ${model}_dateLabelError);
        add(${model}_dateInputGroup);
        this.${model}_dateField.setValue(${model}.get${Model}_date());
        */

        add(sendButton);
        add(cancelButton);
    }

    private void bind() {

        /**
        death_dateInputGroup.setKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (death_dateInputGroup.hasError()) {
                        death_dateInputGroup.setError("La date est incorrecte");
                    } else {
                        death_dateInputGroup.setError("");
                        amountField.grabFocus();
                    }
                }
            }
        });
        */

        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ${Model} binded = get${Model}();
                if(binded != null) {
                    binded.save();
                }
            }
        });

        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

    }

    @Override
    public void layoutContainer(Container parent) {
        Rectangle bound = parent.getBounds();
        int inset = 4;
        int x = bound.x;
        int y = bound.y;
        int width = bound.width;
        int height = bound.height;
        int buttonWidth = 120;
        int inputGroupHeight = 60;
        /*
        bandeInputGroup.setBounds(inset, 0, width - inset, inputGroupHeight);
        ${model}_dateInputGroup.setBounds(inset, inputGroupHeight, width - inset, inputGroupHeight);
        */

        sendButton.setBounds(x + width - buttonWidth - 2 * inset, y + height - 45, buttonWidth, 30);
        cancelButton.setBounds(x + width - (2 * buttonWidth + 2 * inset), y + height - 45, buttonWidth, 30);
    }

    public ${Model} get${Model}() {
        /*
        if (bandeInputGroup.hasError()) {
            bandeField.grabFocus();
            bandeInputGroup.setError("Cette valeur est requise.");
            return null;
        }
        bandeInputGroup.setError("");
        ${model}.setBande(((Bande) bandeInputGroup.getValue()));
        
        if (${model}_dateInputGroup.hasError()) {
            ${model}_dateField.grabFocus();
            ${model}_dateInputGroup.setError("La date est incorrecte.");
            return null;
        }
        ${model}_dateInputGroup.setError("");
        ${model}.setDepense_date((Date) ${model}_dateInputGroup.getValue());
        */

        return ${model};
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("${Model} View");
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        frame.setBackground(Color.lightGray);
        ${Model}Form mainPanel = new ${Model}Form();
        frame.getContentPane().add(mainPanel);
        frame.pack();
        frame.setBounds(200, 200, 640, 480);
        frame.setVisible(true);
    }
}
